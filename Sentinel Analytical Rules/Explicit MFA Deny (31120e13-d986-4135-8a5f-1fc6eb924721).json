{
    "contentVersion":  "1.0.0.0",
    "$schema":  "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "resources":  [
                      {
                          "id":  "[concat(resourceId(\u0027Microsoft.OperationalInsights/workspaces/providers\u0027, parameters(\u0027workspace\u0027), \u0027Microsoft.SecurityInsights\u0027),\u0027/alertRules/31120e13-d986-4135-8a5f-1fc6eb924721\u0027)]",
                          "name":  "[concat(parameters(\u0027workspace\u0027),\u0027/Microsoft.SecurityInsights/31120e13-d986-4135-8a5f-1fc6eb924721\u0027)]",
                          "type":  "Microsoft.OperationalInsights/workspaces/providers/alertRules",
                          "kind":  "Scheduled",
                          "apiVersion":  "2023-12-01-preview",
                          "properties":  {
                                             "displayName":  "Explicit MFA Deny",
                                             "description":  "User explicitly denies MFA push, indicating that login was not expected and the account\u0027s password may be compromised.",
                                             "severity":  "Medium",
                                             "enabled":  true,
                                             "query":  "let threshold = 1;\nlet FailedMFASignins = SigninLogs\n    | where TimeGenerated \u003e ago(1d) // CAN BE 1 DAY DEP. ON TENANT\n    | where ResultType == 500121\n    | where Status has \"MFA Denied; user declined the authentication\"\n        or Status has \"MFA denied; Phone App Reported Fraud\"\n        or Status has \"MFA denied; user did not select the correct number\"\n        or Status has \"MFA denied; user did not respond to mobile app notification\"\n    | extend isManaged = tostring(parse_json(DeviceDetail).isManaged)\n    | extend isJoined = tostring(parse_json(DeviceDetail).trustType)\n    | extend isRegistered = tostring(parse_json(DeviceDetail).trustType)\n    | project\n        TimeGenerated,\n        ResultType,\n        ResultDescription,\n        Identity,\n        IPAddress,\n        Status,\n        AppDisplayName,\n        isManaged,\n        isJoined,\n        isRegistered\n    | summarize \n        MFAFailedCount=count(),\n        ErrorStatus = make_set(Status),\n        FailedAppsList = make_set(AppDisplayName)\n        by bin(TimeGenerated, 1d), Identity, IPAddress, isManaged, isJoined, isRegistered // CAN BE 1 DAY DEP. ON TENANT\n    | where MFAFailedCount \u003e threshold;\nlet OldestSuccessfulSignin = SigninLogs\n    | where ResultType == 0\n    | join kind= inner (FailedMFASignins) on IPAddress\n    | summarize OldestSigninfrom5days = min(TimeGenerated) by IPAddress;\nlet SuccessfulMFASignins = SigninLogs\n    | where TimeGenerated \u003e ago(1d) // CAN BE 1 DAY DEP. ON TENANT\n    | where ResultType != 500121 // Assuming non-500121 result type is a successful MFA\n    | extend isJoined = tostring(parse_json(DeviceDetail).trustType)\n    | extend isRegistered = tostring(parse_json(DeviceDetail).trustType)\n    | project TimeGenerated, ResultType, Identity, IPAddress, isJoined, isRegistered\n    | summarize SuccessfulMFACount=count() by Identity, IPAddress, isJoined, isRegistered;\nlet SameIPUsersSignins = SigninLogs\n    | join kind=inner (FailedMFASignins) on IPAddress\n    | where not(Identity contains \"-\")\n    | distinct Identity, IPAddress\n    | summarize SameIPUsers5DaysCount = count() by IPAddress\n    | project IPAddress, SameIPUsers5DaysCount;\nlet SameIPSuccessfulSignins5Days = SigninLogs\n    | where ResultType == 0\n    | summarize IPSuccessfulSignins5DaysCount = count() by IPAddress;\nlet JoinedAttempt = SigninLogs\n    | where tostring(parse_json(DeviceDetail).trustType) contains \"Joined\"\n    | extend JoinedAttempt = tostring(parse_json(DeviceDetail).trustType)\n    | summarize IPJoinedAttempts5DaysCount = count() by IPAddress;\nlet RegistereddAttempt = SigninLogs\n    | where tostring(parse_json(DeviceDetail).trustType) contains \"Registered\"\n    | extend RegisteredAttempt = tostring(parse_json(DeviceDetail).trustType)\n    | summarize IPRegisteredAttempts5DaysCount = count() by IPAddress;\nlet ManagedAttempts = SigninLogs\n| union AADNonInteractiveUserSignInLogs\n| where TimeGenerated \u003e ago(14d)\n| where (tostring( parse_json(DeviceDetail_dynamic).trustType) != \"\" or tostring( parse_json(DeviceDetail_string).trustType) != \"\") or (DeviceDetail_dynamic or DeviceDetail_string contains \"PII Removed\")\n| distinct IPAddress;\nFailedMFASignins\n| join kind=inner (SuccessfulMFASignins) on Identity, IPAddress, isJoined, isRegistered\n| extend ManagedDevice = iif(isManaged == \"true\", \"Managed\", \"Unmanaged\")\n| extend JoinedDevice = iif(isJoined contains \"Azure AD joined\", \"Joined\", \"Not Joined\")\n| extend RegisteredDevice = iif(isRegistered contains \"Registered\", \"Registered\", \"Not Registered\")\n| project\n    TimeGenerated,\n    Identity,\n    IPAddress,\n    MFAFailedCount,\n    FailedAppsList,\n    ErrorStatus,\n    SuccessfulMFACount,\n    ManagedDevice,\n    JoinedDevice,\n    RegisteredDevice\n| join kind=leftouter (SameIPUsersSignins) on IPAddress\n| extend SameIPUsers5DaysCount = coalesce(SameIPUsers5DaysCount, 0)\n| join kind= leftouter (SameIPSuccessfulSignins5Days) on $left.IPAddress == $right.IPAddress\n| extend IPSuccessfulSignins5DaysCount = coalesce(IPSuccessfulSignins5DaysCount, 0)\n| join kind=leftouter (RegistereddAttempt) on $left.IPAddress == $right.IPAddress\n| extend IPRegisteredAttempts5DaysCount = coalesce(IPRegisteredAttempts5DaysCount, 0)\n| join kind=leftouter  (JoinedAttempt) on $left.IPAddress == $right.IPAddress\n| extend IPJoinedAttempts5DaysCount= coalesce(IPJoinedAttempts5DaysCount, 0)\n| join kind=leftouter OldestSuccessfulSignin on IPAddress\n| project \n    TimeGenerated,\n    Identity,\n    IPAddress,\n    MFAFailedCount,\n    FailedAppsList,\n    ErrorStatus,\n    SuccessfulMFACount,\n    SameIPUsers5DaysCount,\n    IPSuccessfulSignins5DaysCount,\n    OldestSigninfrom5days,\n    IPJoinedAttempts5DaysCount,\n    IPRegisteredAttempts5DaysCount,\n    ManagedDevice,\n    JoinedDevice,\n    RegisteredDevice\n| where IPSuccessfulSignins5DaysCount == 0 or (IPJoinedAttempts5DaysCount == 0 and IPRegisteredAttempts5DaysCount == 0)\n| join kind=leftanti ManagedAttempts on IPAddress",
                                             "queryFrequency":  "P1D",
                                             "queryPeriod":  "P14D",
                                             "triggerOperator":  "GreaterThan",
                                             "triggerThreshold":  0,
                                             "suppressionDuration":  "PT5H",
                                             "suppressionEnabled":  false,
                                             "startTimeUtc":  null,
                                             "tactics":  [
                                                             "CredentialAccess"
                                                         ],
                                             "techniques":  [

                                                            ],
                                             "subTechniques":  [

                                                               ],
                                             "alertRuleTemplateName":  "a22740ec-fc1e-4c91-8de6-c29c6450ad00",
                                             "incidentConfiguration":  {
                                                                           "createIncident":  true,
                                                                           "groupingConfiguration":  {
                                                                                                         "enabled":  true,
                                                                                                         "reopenClosedIncident":  false,
                                                                                                         "lookbackDuration":  "PT5H",
                                                                                                         "matchingMethod":  "AllEntities",
                                                                                                         "groupByEntities":  [

                                                                                                                             ],
                                                                                                         "groupByAlertDetails":  [

                                                                                                                                 ],
                                                                                                         "groupByCustomDetails":  [

                                                                                                                                  ]
                                                                                                     }
                                                                       },
                                             "eventGroupingSettings":  {
                                                                           "aggregationKind":  "SingleAlert"
                                                                       },
                                             "alertDetailsOverride":  null,
                                             "customDetails":  null,
                                             "entityMappings":  [
                                                                    {
                                                                        "entityType":  "Account",
                                                                        "fieldMappings":  [
                                                                                              {
                                                                                                  "identifier":  "Name",
                                                                                                  "columnName":  "Identity"
                                                                                              }
                                                                                          ]
                                                                    },
                                                                    {
                                                                        "entityType":  "IP",
                                                                        "fieldMappings":  [
                                                                                              {
                                                                                                  "identifier":  "Address",
                                                                                                  "columnName":  "IPAddress"
                                                                                              }
                                                                                          ]
                                                                    }
                                                                ],
                                             "sentinelEntitiesMappings":  null,
                                             "templateVersion":  "1.0.6"
                                         }
                      }
                  ],
    "parameters":  {
                       "workspace":  {
                                         "type":  "String"
                                     }
                   }
}