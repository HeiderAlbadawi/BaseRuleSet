{
    "contentVersion":  "1.0.0.0",
    "$schema":  "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "resources":  [
                      {
                          "id":  "[concat(resourceId(\u0027Microsoft.OperationalInsights/workspaces/providers\u0027, parameters(\u0027workspace\u0027), \u0027Microsoft.SecurityInsights\u0027),\u0027/alertRules/c8dbce7d-a65a-4b41-8429-4bf7ec5fd94a\u0027)]",
                          "name":  "[concat(parameters(\u0027workspace\u0027),\u0027/Microsoft.SecurityInsights/c8dbce7d-a65a-4b41-8429-4bf7ec5fd94a\u0027)]",
                          "type":  "Microsoft.OperationalInsights/workspaces/providers/alertRules",
                          "kind":  "Scheduled",
                          "apiVersion":  "2023-12-01-preview",
                          "properties":  {
                                             "displayName":  "Detected SSPR From an Unfamiliar IP Address",
                                             "description":  "This rule detects SSPR attempts from either a relatively new location or from an unfamiliar IP address.",
                                             "severity":  "Low",
                                             "enabled":  true,
                                             "query":  "let MSIPs = _GetWatchlist(\"MSPublicIPsV2\")\r\n    | project Subnet = SearchKey, FirstOctet = toint(split(SearchKey, \".\")[0]);\r\nlet SSPRCaseNewIP = AuditLogs \r\n    | where TimeGenerated \u003e ago(1h) // ADJUST BASED ON RULE FREQUENCY\r\n    | where OperationName in (\"Unlock user account (self-service)\", \"Reset password (self-service)\", \"Change password (self-service)\") \r\n    | where Result == \"success\" \r\n    | extend IPAddress = tostring(parse_json(tostring(InitiatedBy.user)).ipAddress) \r\n    | extend UserPrincipalName = tostring(parse_json(tostring(InitiatedBy.user)).userPrincipalName)\r\n    | where isnotempty(IPAddress)\r\n    | project\r\n        UserPrincipalName,\r\n        IPAddress,\r\n        OperationName,\r\n        ResultDescription,\r\n        Case = \"New IPAddress\";\r\nlet ManagedAttempts = SigninLogs\r\n    | union AADNonInteractiveUserSignInLogs\r\n    | where TimeGenerated \u003e ago(14d)\r\n    | where (tostring(parse_json(DeviceDetail_dynamic).trustType) != \"\" or tostring(parse_json(DeviceDetail_string).trustType) != \"\") or (DeviceDetail_dynamic or DeviceDetail_string contains \"PII Removed\")\r\n    | distinct IPAddress;\r\nlet MultipleUsersIPSigninLogs = SigninLogs\r\n    | union AADNonInteractiveUserSignInLogs\r\n    | where TimeGenerated \u003e ago(14d)\r\n    | where ResultType == 0 and AuthenticationRequirement contains \"Multifactor\"\r\n    | summarize SameIPUsersCount = dcount(UserPrincipalName) by IPAddress\r\n    | where SameIPUsersCount \u003e 2; // ADJUST TO TUNE THE RULE\r\nlet SimilarIPSubnetUsersSigninLogs = SigninLogs\r\n    | union AADNonInteractiveUserSignInLogs\r\n    | where TimeGenerated \u003e ago(14d)\r\n    | where ResultType == 0 and AuthenticationRequirement contains \"Multifactor\"\r\n    | extend IPSubnet = iff(\r\n                            indexof(IPAddress, \":\") != -1,  // If colon exists, it\u0027s IPv6\r\n                            trim(\" \", substring(IPAddress, 0, indexof(IPAddress, \":\", indexof(IPAddress, \":\") + 1))),\r\n                            trim(\" \", substring(IPAddress, 0, indexof(IPAddress, \".\", indexof(IPAddress, \".\") + 1)))\r\n                        )\r\n    | summarize SameIPSubnetUsersCount = dcount(UserPrincipalName) by IPSubnet\r\n    | where SameIPSubnetUsersCount \u003e 2; // ADJUST TO TUNE THE RULE\r\nlet MultipleUsersIPAuditLogs = AuditLogs\r\n    | where TimeGenerated \u003e ago(14d)\r\n    | extend IPAddress = tostring(parse_json(tostring(InitiatedBy.user)).ipAddress) \r\n    | extend UserPrincipalName = tostring(parse_json(tostring(InitiatedBy.user)).userPrincipalName)\r\n    | summarize SameIPUsersCount = dcount(UserPrincipalName) by IPAddress\r\n    | where SameIPUsersCount \u003e 2; // ADJUST TO TUNE THE RULE\r\nlet SimilarIPSubnetUsersAuditLogs = AuditLogs\r\n    | where TimeGenerated \u003e ago(14d)\r\n    | extend IPAddress = tostring(parse_json(tostring(InitiatedBy.user)).ipAddress) \r\n    | extend UserPrincipalName = tostring(parse_json(tostring(InitiatedBy.user)).userPrincipalName)\r\n    | extend IPSubnet = iff(\r\n                            indexof(IPAddress, \":\") != -1,  // If colon exists, it\u0027s IPv6\r\n                            trim(\" \", substring(IPAddress, 0, indexof(IPAddress, \":\", indexof(IPAddress, \":\") + 1))),\r\n                            trim(\" \", substring(IPAddress, 0, indexof(IPAddress, \".\", indexof(IPAddress, \".\") + 1)))\r\n                        )\r\n    | summarize SameIPSubnetUsersCount = dcount(UserPrincipalName) by IPSubnet\r\n    | where SameIPSubnetUsersCount \u003e 2; // ADJUST TO TUNE THE RULE\r\nlet KnownLocations = SigninLogs\r\n    | where TimeGenerated between(ago(14d) .. ago(7d))\r\n    | where ResultType == 0\r\n    | extend LocationDetail = strcat(Location, \"-\", LocationDetails.state)\r\n    | summarize UserKnownLocation = make_set(LocationDetail) by UserPrincipalName;\r\nlet SUSLocation = SigninLogs\r\n    | where TimeGenerated \u003e ago(7d)\r\n    | where ResultType == 0\r\n    | join kind=inner KnownLocations on UserPrincipalName // To avoid new users MFA spam\r\n    | join kind=inner SSPRCaseNewIP on IPAddress\r\n    | extend AnomalousLocation = strcat(Location, \"-\", LocationDetails.state)\r\n    | where not(UserKnownLocation has AnomalousLocation)\r\n    | join kind=leftanti ManagedAttempts on IPAddress\r\n    | distinct UserPrincipalName;\r\nlet SSPRCaseNewLocation = AuditLogs \r\n    | where TimeGenerated \u003e ago(1h) // ADJUST BASED ON RULE FREQUENCY\r\n    | where OperationName in (\"Unlock user account (self-service)\", \"Reset password (self-service)\", \"Change password (self-service)\") \r\n    | where Result == \"success\" \r\n    | extend IPAddress = tostring(parse_json(tostring(InitiatedBy.user)).ipAddress) \r\n    | extend UserPrincipalName = tostring(parse_json(tostring(InitiatedBy.user)).userPrincipalName)\r\n    | where isnotempty(IPAddress)\r\n    | project\r\n        UserPrincipalName,\r\n        IPAddress,\r\n        OperationName,\r\n        ResultDescription,\r\n        Case = \"New Location\"\r\n    | join kind=inner SUSLocation on UserPrincipalName\r\n    | summarize\r\n        Operations = make_set(OperationName),\r\n        ResultDescriptions = make_set(ResultDescription)\r\n        by UserPrincipalName, IPAddress, Case;\r\nlet subnetCheck = SSPRCaseNewIP\r\n    | extend IP = tostring(IPAddress)\r\n    | extend FirstOctet = toint(split(IP, \".\")[0])\r\n    | join kind=leftouter MSIPs on FirstOctet\r\n    | extend IsInSubnet = ipv4_is_in_range(IP, Subnet)\r\n    | summarize IsInSubnet = max(toint(IsInSubnet)) by IP;\r\nSSPRCaseNewIP\r\n| extend IPSubnet = iff(\r\n                        indexof(IPAddress, \":\") != -1,  // If colon exists, it\u0027s IPv6\r\n                        trim(\" \", substring(IPAddress, 0, indexof(IPAddress, \":\", indexof(IPAddress, \":\") + 1))),\r\n                        trim(\" \", substring(IPAddress, 0, indexof(IPAddress, \".\", indexof(IPAddress, \".\") + 1)))\r\n                    )\r\n| join kind=leftanti ManagedAttempts on IPAddress\r\n| join kind=leftanti MultipleUsersIPSigninLogs on IPAddress\r\n| join kind=leftanti MultipleUsersIPAuditLogs on IPAddress\r\n| join kind=leftanti SimilarIPSubnetUsersSigninLogs on IPSubnet\r\n| join kind=leftanti SimilarIPSubnetUsersAuditLogs on IPSubnet\r\n| join kind=leftouter subnetCheck on $left.IPAddress == $right.IP\r\n| extend IsInSubnet = tobool(IsInSubnet)\r\n| where IsInSubnet == false\r\n| project-away IPSubnet\r\n| summarize\r\n    Operations = make_set(OperationName),\r\n    ResultDescriptions = make_set(ResultDescription)\r\n    by UserPrincipalName, IPAddress, Case\r\n| union SSPRCaseNewLocation",
                                             "queryFrequency":  "PT1H",
                                             "queryPeriod":  "P14D",
                                             "triggerOperator":  "GreaterThan",
                                             "triggerThreshold":  0,
                                             "suppressionDuration":  "PT5H",
                                             "suppressionEnabled":  false,
                                             "startTimeUtc":  null,
                                             "tactics":  [

                                                         ],
                                             "techniques":  [

                                                            ],
                                             "subTechniques":  [

                                                               ],
                                             "alertRuleTemplateName":  null,
                                             "incidentConfiguration":  {
                                                                           "createIncident":  true,
                                                                           "groupingConfiguration":  {
                                                                                                         "enabled":  false,
                                                                                                         "reopenClosedIncident":  false,
                                                                                                         "lookbackDuration":  "PT5H",
                                                                                                         "matchingMethod":  "AllEntities",
                                                                                                         "groupByEntities":  [

                                                                                                                             ],
                                                                                                         "groupByAlertDetails":  [

                                                                                                                                 ],
                                                                                                         "groupByCustomDetails":  [

                                                                                                                                  ]
                                                                                                     }
                                                                       },
                                             "eventGroupingSettings":  {
                                                                           "aggregationKind":  "SingleAlert"
                                                                       },
                                             "alertDetailsOverride":  null,
                                             "customDetails":  null,
                                             "entityMappings":  [
                                                                    {
                                                                        "entityType":  "Account",
                                                                        "fieldMappings":  [
                                                                                              {
                                                                                                  "identifier":  "Name",
                                                                                                  "columnName":  "UserPrincipalName"
                                                                                              }
                                                                                          ]
                                                                    },
                                                                    {
                                                                        "entityType":  "IP",
                                                                        "fieldMappings":  [
                                                                                              {
                                                                                                  "identifier":  "Address",
                                                                                                  "columnName":  "IPAddress"
                                                                                              }
                                                                                          ]
                                                                    },
                                                                    {
                                                                        "entityType":  "Process",
                                                                        "fieldMappings":  [
                                                                                              {
                                                                                                  "identifier":  "CommandLine",
                                                                                                  "columnName":  "Operations"
                                                                                              }
                                                                                          ]
                                                                    },
                                                                    {
                                                                        "entityType":  "Process",
                                                                        "fieldMappings":  [
                                                                                              {
                                                                                                  "identifier":  "CommandLine",
                                                                                                  "columnName":  "Case"
                                                                                              }
                                                                                          ]
                                                                    }
                                                                ],
                                             "sentinelEntitiesMappings":  null,
                                             "templateVersion":  null
                                         }
                      }
                  ],
    "parameters":  {
                       "workspace":  {
                                         "type":  "String"
                                     }
                   }
}