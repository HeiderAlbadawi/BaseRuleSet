{
    "contentVersion":  "1.0.0.0",
    "$schema":  "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "resources":  [
                      {
                          "id":  "[concat(resourceId(\u0027Microsoft.OperationalInsights/workspaces/providers\u0027, parameters(\u0027workspace\u0027), \u0027Microsoft.SecurityInsights\u0027),\u0027/alertRules/75469252-a24b-4d34-a2ee-92c42c55856b\u0027)]",
                          "name":  "[concat(parameters(\u0027workspace\u0027),\u0027/Microsoft.SecurityInsights/75469252-a24b-4d34-a2ee-92c42c55856b\u0027)]",
                          "type":  "Microsoft.OperationalInsights/workspaces/providers/alertRules",
                          "kind":  "Scheduled",
                          "apiVersion":  "2023-12-01-preview",
                          "properties":  {
                                             "displayName":  "Failed AzureAD logons but success logon to host - [WC-AZURE]",
                                             "description":  "Identifies a list of IP addresses with a minimum number (default of 5) of failed logon attempts to Azure Active Directory.\nUses that list to identify any successful remote logons to hosts from these IPs within the same timeframe.",
                                             "severity":  "Medium",
                                             "enabled":  true,
                                             "query":  "//Adjust this threshold to fit the environment\nlet signin_threshold = 5;\n//Make a list of all IPs with failed signins to AAD above our threshold\nlet aadFunc = (tableName: string) {\n    let suspicious_signins =\n        table(tableName)\n        | where ResultType !in (\"0\", \"50125\", \"50140\")\n        | where IPAddress !in (\u0027127.0.0.1\u0027, \u0027::1\u0027)\n        | summarize count() by IPAddress\n        | where count_ \u003e signin_threshold\n        | summarize make_set(IPAddress);\n    //See if any of these IPs have sucessfully logged into *nix hosts\n    let linux_logons =\n        Syslog\n        | where Facility contains \"auth\" and ProcessName != \"sudo\"\n        | where SyslogMessage has \"Accepted\"\n        | extend SourceIP = extract(\"(([0-9]{1,3})\\\\.([0-9]{1,3})\\\\.([0-9]{1,3})\\\\.(([0-9]{1,3})))\", 1, SyslogMessage)\n        | where SourceIP in (suspicious_signins)\n        | extend Reason = \"Multiple failed AAD logins from IP address\"\n        | project\n            TimeGenerated,\n            Computer,\n            HostIP,\n            IpAddress = SourceIP,\n            SyslogMessage,\n            Facility,\n            ProcessName,\n            Reason;\n    //See if any of these IPs have sucessfully logged into Windows hosts\n    let win_logons = (union isfuzzy=true\n            (SecurityEvent\n            | where EventID == 4624\n            | where LogonType in (10, 7, 3)\n            | where IpAddress != \"-\"\n            | where IpAddress in (suspicious_signins)\n            | extend Reason = \"Multiple failed AAD logins from IP address\"\n            | project\n                TimeGenerated,\n                Account,\n                AccountType,\n                Computer,\n                Activity,\n                EventID,\n                LogonProcessName,\n                IpAddress,\n                LogonTypeName,\n                TargetUserSid,\n                Reason\n            ),\n            (WindowsEvent\n            | where EventID == 4624 and has_any_ipv4(EventData, toscalar(suspicious_signins))\n            | extend LogonType = tostring(EventData.LogonType)\n            | where LogonType in (10, 7, 3)\n            | extend IpAddress = tostring(EventData.IpAddress)\n            | where IpAddress != \"-\"\n            | where IpAddress in (suspicious_signins)\n            | extend Reason = \"Multiple failed AAD logins from IP address\"\n            | extend Activity = \"4624 - An account was successfully logged on.\"\n            | extend Account =  strcat(tostring(EventData.TargetDomainName), \"\\\\\", tostring(EventData.TargetUserName))\n            | extend TargetUserSid = tostring(EventData.TargetUserSid)\n            | extend TargetAccount = strcat(EventData.TargetDomainName, \"\\\\\", EventData.TargetUserName)\n            | extend AccountType =case(Account endswith \"$\" or TargetUserSid in (\"S-1-5-18\", \"S-1-5-19\", \"S-1-5-20\"), \"Machine\", isempty(TargetUserSid), \"\", \"User\")\n            | extend LogonProcessName = tostring(EventData.LogonProcessName)\n            | project\n                TimeGenerated,\n                Account,\n                AccountType,\n                Computer,\n                Activity,\n                EventID,\n                LogonProcessName,\n                IpAddress,\n                TargetUserSid,\n                Reason\n            )\n        );\n    union isfuzzy=true linux_logons, win_logons\n    | extend\n        timestamp = TimeGenerated,\n        AccountCustomEntity = Account,\n        IPCustomEntity = IpAddress,\n        HostCustomEntity = Computer\n};\nlet aadSignin = aadFunc(\"SigninLogs\");\nlet aadNonInt = aadFunc(\"AADNonInteractiveUserSignInLogs\");\nlet finaltable = union isfuzzy=true aadSignin, aadNonInt;\nlet ManagedAttempts = SigninLogs\n    | where tostring(parse_json(DeviceDetail).trustType) != \"\"\n    | summarize IPManagedAttemptsCount = count() by IPAddress\n    | project IPAddress, IPManagedAttemptsCount;\nfinaltable\n| join kind=leftouter ManagedAttempts on $left.IpAddress == $right.IPAddress\n| extend IPManagedAttemptsCount = coalesce(IPManagedAttemptsCount,0)\n| project\n    TimeGenerated,\n    Computer,\n    IpAddress,\n    Reason,\n    IPManagedAttemptsCount,\n    Account,\n    AccountType,\n    Activity,\n    EventID,\n    LogonProcessName,\n    LogonTypeName,\n    TargetUserSid,\n    timestamp\n| where IPManagedAttemptsCount == 0\n",
                                             "queryFrequency":  "PT15M",
                                             "queryPeriod":  "PT15M",
                                             "triggerOperator":  "GreaterThan",
                                             "triggerThreshold":  0,
                                             "suppressionDuration":  "PT5H",
                                             "suppressionEnabled":  false,
                                             "startTimeUtc":  null,
                                             "tactics":  [
                                                             "InitialAccess",
                                                             "CredentialAccess"
                                                         ],
                                             "techniques":  [
                                                                "T1078",
                                                                "T1110"
                                                            ],
                                             "subTechniques":  [

                                                               ],
                                             "alertRuleTemplateName":  "8ee967a2-a645-4832-85f4-72b635bcb3a6",
                                             "incidentConfiguration":  {
                                                                           "createIncident":  true,
                                                                           "groupingConfiguration":  {
                                                                                                         "enabled":  true,
                                                                                                         "reopenClosedIncident":  false,
                                                                                                         "lookbackDuration":  "PT15M",
                                                                                                         "matchingMethod":  "AllEntities",
                                                                                                         "groupByEntities":  [

                                                                                                                             ],
                                                                                                         "groupByAlertDetails":  [

                                                                                                                                 ],
                                                                                                         "groupByCustomDetails":  [

                                                                                                                                  ]
                                                                                                     }
                                                                       },
                                             "eventGroupingSettings":  {
                                                                           "aggregationKind":  "SingleAlert"
                                                                       },
                                             "alertDetailsOverride":  null,
                                             "customDetails":  null,
                                             "entityMappings":  [
                                                                    {
                                                                        "entityType":  "Account",
                                                                        "fieldMappings":  [
                                                                                              {
                                                                                                  "identifier":  "FullName",
                                                                                                  "columnName":  "Account"
                                                                                              }
                                                                                          ]
                                                                    }
                                                                ],
                                             "sentinelEntitiesMappings":  null,
                                             "templateVersion":  "1.1.1"
                                         }
                      }
                  ],
    "parameters":  {
                       "workspace":  {
                                         "type":  "String"
                                     }
                   }
}